#include "esphome.h"
#include "IRremoteESP8266.h"
#include "IRsend.h"

// Example for sending custom RAW data

const uint16_t kIrLed = D3; 
IRsend irsend(kIrLed);

class LolinRemote23Auto : public Component, public Switch {
  public:

    // Example of data captured by IRrecvDumpV2.ino
    uint16_t haier23auto[181] = {3066, 3042,  3066, 4412,  580, 1636,  578, 538,  602, 1610,  606, 512,  602, 536,  580, 1608,  606, 1602,  580, 542,  576, 540,  602, 1610,  606, 1608,  606, 1610,  608, 510,  602, 512,  604, 528,  578, 1602,  606, 514,  576, 538,  602, 510,  604, 512,  576, 560,  554, 1636,  606, 502,  604, 516,  576, 538,  604, 510,  604, 1608,  580, 538,  604, 512,  578, 1634,  606, 1602,  606, 1600,  752, 1418,  624, 538,  576, 1636,  578, 540,  578, 1634,  606, 536,  552, 528,  604, 1600,  606, 534,  580, 512,  604, 1608,  608, 534,  580, 510,  604, 510,  604, 1600,  604, 516,  604, 510,  578, 538,  602, 1610,  606, 512,  604, 536,  580, 512,  602, 528,  554, 542,  604, 512,  578, 560,  554, 538,  602, 512,  604, 534,  580, 512,  576, 554,  554, 542,  604, 534,  580, 510,  604, 510,  604, 512,  604, 510,  604, 514,  576, 552,  580, 514,  606, 534,  552, 538,  602, 512,  604, 512,  604, 510,  602, 512,  604, 504,  602, 1600,  606, 512,  604, 510,  602, 1610,  604, 512,  604, 1608,  608, 1606,  608, 1600,  604, 512,  578};  // UNKNOWN DEA02F28

    void setup() override {
      pinMode(kIrLed, OUTPUT);
      irsend.begin();
    }

    void write_state(bool state) override {
      irsend.sendRaw(haier23auto , 181, 38);  // Send a raw data capture at 38kHz.
      publish_state(!state);
    }
};

class LolinRemoteOff : public Component, public Switch {
  public:

    // Example of data captured by IRrecvDumpV2.ino
    uint16_t haier_off[181] = {3068, 3040,  3072, 4408,  608, 1606,  606, 512,  602, 1610,  608, 510,  606, 510,  602, 1608,  606, 1600,  608, 514,  576, 538,  580, 1632,  608, 1606,  610, 1604,  610, 510,  604, 510,  580, 526,  604, 514,  606, 510,  604, 534,  580, 508,  608, 532,  580, 512,  604, 1608,  608, 502,  578, 540,  608, 510,  604, 510,  602, 1610,  608, 1606,  608, 510,  606, 532,  578, 504,  610, 510,  604, 1608,  608, 508,  608, 1604,  610, 508,  602, 1610,  606, 512,  606, 500,  578, 1628,  610, 532,  582, 508,  576, 1636,  606, 512,  608, 508,  606, 508,  602, 1602,  610, 512,  602, 514,  608, 506,  606, 1606,  608, 512,  604, 508,  606, 510,  604, 502,  608, 512,  600, 514,  608, 506,  606, 510,  604, 510,  606, 510,  606, 532,  580, 502,  610, 510,  602, 512,  606, 508,  606, 510,  576, 538,  608, 508,  606, 508,  576, 532,  606, 512,  578, 536,  610, 530,  578, 512,  602, 512,  610, 506,  608, 508,  602, 504,  606, 1598,  604, 512,  606, 508,  608, 1604,  608, 1606,  608, 510,  604, 1610,  608, 1598,  608, 510,  574};  // UNKNOWN E4E8FC0E

    void setup() override {
      pinMode(kIrLed, OUTPUT);
      irsend.begin();
    }

    void write_state(bool state) override {
      irsend.sendRaw(haier_off , 181, 38);  // Send a raw data capture at 38kHz.
      publish_state(!state);
    }
};
